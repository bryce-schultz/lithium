#!/usr/bin/env bash

# Usage: run_all_tests_with_memory [-v] [-f]
# Runs all .li tests under test/ with valgrind memory leak checking
# Options:
#   -v: verbose output (show detailed valgrind output for failures)
#   -f: fast mode (skip memory leak checking, just run functionality tests)

red='\033[31m'
bold_red='\033[1;31m'
green='\033[32m'
bold_green='\033[1;32m'
blue='\033[34m'
bold_blue='\033[1;34m'
yellow='\033[33m'
bold_yellow='\033[1;33m'
nc='\033[0m'

verbose=0
fast_mode=0

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            verbose=1
            shift
            ;;
        -f|--fast)
            fast_mode=1
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [-v] [-f]"
            echo "  -v, --verbose  Show detailed output for failures"
            echo "  -f, --fast     Skip memory leak checking (faster)"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

if [[ ! -d "test" ]]; then
    echo "Tests directory does not exist."
    exit 1
fi

# Check if valgrind is available
if [[ $fast_mode -eq 0 ]] && ! command -v valgrind &> /dev/null; then
    echo -e "${yellow}Warning: valgrind not found. Running in fast mode (no memory leak checking).${nc}"
    fast_mode=1
fi

# Check if lithium interpreter exists
if [[ ! -f "src/li" ]]; then
    echo -e "${red}Error: lithium interpreter not found at src/li${nc}"
    echo "Please build the project first: cd src && make"
    exit 1
fi

run_test="$(dirname "$0")/run_test"
cd "$(dirname "$run_test")" || exit 1

cd test || exit 1
mapfile -t all_li_files < <(find . -type f -name '*.li' | sed 's|^./||' | sort)

# Filter to only include tests that have corresponding .correct files
test_files=()
for li_file in "${all_li_files[@]}"; do
    test_name="${li_file%.li}"
    correct_file="${test_name}.correct"
    if [[ -f "$correct_file" ]]; then
        test_files+=("$li_file")
    fi
done
cd ..

if [[ ${#test_files[@]} -eq 0 ]]; then
    echo -e "${red}error${nc}: no test files found."
    exit 1
fi

echo -e "${blue}╭────────────────────────────────────────────╮${nc}"
if [[ $fast_mode -eq 1 ]]; then
    header="Running Tests (Fast Mode)"
    header_len=${#header}
    header_pad=$(( (44 - header_len) / 2 ))
    header_pad_right=$(( 44 - header_len - header_pad ))
    printf "${blue}│${bold_blue}%*s%s%*s${nc}${blue}│${nc}\n" $header_pad "" "$header" $header_pad_right ""
else
    header="Running Tests with Memory Checking"
    header_len=${#header}
    header_pad=$(( (44 - header_len) / 2 ))
    header_pad_right=$(( 44 - header_len - header_pad ))
    printf "${blue}│${bold_blue}%*s%s%*s${nc}${blue}│${nc}\n" $header_pad "" "$header" $header_pad_right ""
fi
echo -e "${blue}╰────────────────────────────────────────────╯${nc}"

# Statistics
total_tests=${#test_files[@]}
passed_functional=0
failed_functional=0
passed_memory=0
failed_memory=0
memory_skipped=0

# Arrays to track detailed results
declare -a functional_failures
declare -a memory_failures
declare -a test_results

# Create temporary directory for memory logs
mkdir -p memory_test_logs

for test_file in "${test_files[@]}"; do
    test_name="${test_file%.li}"
    test_path="test/$test_file"
    
    printf " %-35s" "● $test_name"
    
    # Run functional test first
    "$run_test" "$test_name" -s > /dev/null 2>&1
    functional_result=$?
    
    if [[ $functional_result -eq 0 ]]; then
        passed_functional=$((passed_functional + 1))
        functional_status="${green}✓${nc}"
        
        # Run memory test if not in fast mode
        if [[ $fast_mode -eq 0 ]]; then
            memory_log="memory_test_logs/${test_name//\//_}.log"
            
            # Run valgrind
            valgrind --tool=memcheck \
                     --leak-check=full \
                     --show-leak-kinds=all \
                     --track-origins=yes \
                     --log-file="$memory_log" \
                     --error-exitcode=1 \
                     src/li "$test_path" > /dev/null 2>&1
            
            valgrind_exit=$?
            
            # Check for memory leaks
            if grep -q "All heap blocks were freed -- no leaks are possible" "$memory_log" || \
               (grep -q "definitely lost: 0 bytes" "$memory_log" && \
                grep -q "indirectly lost: 0 bytes" "$memory_log" && \
                grep -q "possibly lost: 0 bytes" "$memory_log"); then
                passed_memory=$((passed_memory + 1))
                memory_status="${green}✓${nc}"
                # Clean up log file for passed tests
                rm -f "$memory_log"
            else
                failed_memory=$((failed_memory + 1))
                memory_failures+=("$test_name")
                memory_status="${red}✗${nc}"
            fi
            
            echo -e "  ${functional_status} ${memory_status}"
        else
            memory_skipped=$((memory_skipped + 1))
            echo -e "  ${functional_status} ${yellow}~${nc}"
        fi
    else
        failed_functional=$((failed_functional + 1))
        functional_failures+=("$test_name")
        functional_status="${red}✗${nc}"
        
        if [[ $fast_mode -eq 0 ]]; then
            memory_skipped=$((memory_skipped + 1))
            echo -e "  ${functional_status} ${yellow}~${nc}"
        else
            echo -e "  ${functional_status} ${yellow}~${nc}"
        fi
    fi
done

echo ""

# Show detailed failure information if verbose mode
if [[ $verbose -eq 1 ]]; then
    if [[ ${#functional_failures[@]} -gt 0 ]]; then
        echo -e "${red}Functional Test Failures:${nc}"
        for failure in "${functional_failures[@]}"; do
            echo -e "  ${red}✗${nc} $failure"
            # Show the actual test failure
            "$run_test" "$failure" 2>&1 | head -10
            echo ""
        done
    fi
    
    if [[ ${#memory_failures[@]} -gt 0 ]]; then
        echo -e "${red}Memory Leak Failures:${nc}"
        for failure in "${memory_failures[@]}"; do
            memory_log="memory_test_logs/${failure//\//_}.log"
            echo -e "  ${red}✗${nc} $failure"
            if [[ -f "$memory_log" ]]; then
                echo "    Memory summary:"
                grep -E "(definitely lost|indirectly lost|possibly lost)" "$memory_log" | head -3 | sed 's/^/      /'
                echo ""
            fi
        done
    fi
fi

# Print summary
echo -e "${blue}╭────────────────────────────────────────────╮${nc}"
echo -e "${blue}│                ${bold_blue}Test Summary                │${nc}"
echo -e "${blue}├────────────────────────────────────────────┤${nc}"

total_width=44

if [[ $fast_mode -eq 1 ]]; then
    if [[ $failed_functional -eq 0 ]]; then
        functional_summary="Functional: $passed_functional/$total_tests passed"
        func_len=${#functional_summary}
        func_pad=$(( (total_width - func_len) / 2 ))
        func_pad_right=$(( total_width - func_len - func_pad ))
        printf "${blue}│${green}%*s%s%*s${nc}${blue}│${nc}\n" $func_pad "" "$functional_summary" $func_pad_right ""
        
        memory_summary="Memory: skipped (fast mode)"
        mem_len=${#memory_summary}
        mem_pad=$(( (total_width - mem_len) / 2 ))
        mem_pad_right=$(( total_width - mem_len - mem_pad ))
        printf "${blue}│${yellow}%*s%s%*s${nc}${blue}│${nc}\n" $mem_pad "" "$memory_summary" $mem_pad_right ""
    else
        functional_summary="Functional: $passed_functional/$total_tests passed, $failed_functional failed"
        func_len=${#functional_summary}
        func_pad=$(( (total_width - func_len) / 2 ))
        func_pad_right=$(( total_width - func_len - func_pad ))
        printf "${blue}│${red}%*s%s%*s${nc}${blue}│${nc}\n" $func_pad "" "$functional_summary" $func_pad_right ""
        
        memory_summary="Memory: skipped (fast mode)"
        mem_len=${#memory_summary}
        mem_pad=$(( (total_width - mem_len) / 2 ))
        mem_pad_right=$(( total_width - mem_len - mem_pad ))
        printf "${blue}│${yellow}%*s%s%*s${nc}${blue}│${nc}\n" $mem_pad "" "$memory_summary" $mem_pad_right ""
    fi
else
    if [[ $failed_functional -eq 0 ]]; then
        functional_summary="Functional: $passed_functional/$total_tests passed"
        func_len=${#functional_summary}
        func_pad=$(( (total_width - func_len) / 2 ))
        func_pad_right=$(( total_width - func_len - func_pad ))
        printf "${blue}│${green}%*s%s%*s${nc}${blue}│${nc}\n" $func_pad "" "$functional_summary" $func_pad_right ""
    else
        functional_summary="Functional: $passed_functional/$total_tests passed, $failed_functional failed"
        func_len=${#functional_summary}
        func_pad=$(( (total_width - func_len) / 2 ))
        func_pad_right=$(( total_width - func_len - func_pad ))
        printf "${blue}│${red}%*s%s%*s${nc}${blue}│${nc}\n" $func_pad "" "$functional_summary" $func_pad_right ""
    fi
    
    if [[ $failed_memory -eq 0 ]]; then
        memory_summary="Memory: $passed_memory/$((passed_functional)) clean"
        mem_len=${#memory_summary}
        mem_pad=$(( (total_width - mem_len) / 2 ))
        mem_pad_right=$(( total_width - mem_len - mem_pad ))
        printf "${blue}│${green}%*s%s%*s${nc}${blue}│${nc}\n" $mem_pad "" "$memory_summary" $mem_pad_right ""
    else
        memory_summary="Memory: $passed_memory/$((passed_functional)) clean, $failed_memory leaked"
        mem_len=${#memory_summary}
        mem_pad=$(( (total_width - mem_len) / 2 ))
        mem_pad_right=$(( total_width - mem_len - mem_pad ))
        printf "${blue}│${red}%*s%s%*s${nc}${blue}│${nc}\n" $mem_pad "" "$memory_summary" $mem_pad_right ""
    fi
fi

echo -e "${blue}╰────────────────────────────────────────────╯${nc}"

# Legend
echo ""
if [[ $fast_mode -eq 1 ]]; then
    echo -e "Legend: ${green}✓${nc} = passed, ${red}✗${nc} = failed, ${yellow}~${nc} = skipped"
else
    echo -e "Legend: ${green}✓${nc} = passed, ${red}✗${nc} = failed, ${yellow}~${nc} = skipped"
    echo -e "Format: [functional] [memory]"
fi

if [[ $verbose -eq 0 ]] && [[ ${#memory_failures[@]} -gt 0 || ${#functional_failures[@]} -gt 0 ]]; then
    echo ""
    echo -e "${yellow}Use -v/--verbose for detailed failure information${nc}"
fi

if [[ ${#memory_failures[@]} -gt 0 ]]; then
    echo -e "${yellow}Memory leak logs saved in memory_test_logs/${nc}"
fi

# Cleanup empty memory_test_logs directory
if [[ -d "memory_test_logs" ]] && [[ -z "$(ls -A memory_test_logs 2>/dev/null)" ]]; then
    rmdir memory_test_logs
fi

# Exit with appropriate code
if [[ $failed_functional -gt 0 ]] || [[ $failed_memory -gt 0 ]]; then
    exit 1
else
    exit 0
fi
