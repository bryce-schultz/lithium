program -> stmts

stmts -> stmts stmt
       | stmt

stmt -> exprStmt
      | forStmt
      | whileStmt
      | ifStmt
      | block
      | returnStmt
      | breakStmt

exprStmt -> LET IDENTIFIER = expr ;
          | CONST IDENTIFIER = expr ;
          | printStmt
          | expr ;
          | ;

forStmt -> FOR ( exprStmt exprStmt expr ) stmt

whileStmt -> WHILE ( expr ) stmt

ifStmt -> IF ( expr ) stmt
        | IF ( expr ) stmt ELSE stmt

block -> { stmts }
       | { }

returnStmt -> RETURN expression ;
            | RETURN ;

breakStmt -> BREAK ;

printStmt -> PRINT ( exprList ) ;
           | PRINT ( ) ;

expr -> assign expr'

expr' -> , assign expr'
       | nothing

assign -> or assign'

assign' -> OR or assign'
         | nothing

or -> and or'

or' -> AND and or'
     | nothing

and -> equality and'

and' -> EQ equality and'
      | nothing

equality -> relation equality'

equality' -> EQ relation equality'
           | NE relation equality'
           | nothing

relation -> addit relation'

relation' -> > addit relation'
           | < addit relation'
           | GE addit relation'
           | LE addit relation'
           | nothing

addit -> mult addit'

addit' -> + mult addit'
        | - mult addit'

mult -> unary mult'

mult' -> * uanry mult'
       | / uanry mult'
       | % unary mult'
       | nothing

unaryOp -> +
         | -
         | !

unary -> INCREMENT unary
       | DECREMENT unary
       | unaryOp mult
       | post

argList -> argList ',' assign
         | assign

post -> primary post''
post' -> [ expr ]
       | ( argList )
       | . IDENTIFIER
       | INCREMENT

post'' -> post' post''
        | Ïµ

primary -> ( expr )
         | [ expr ]
         | IDENTIFIER
         | NUMBER
         | STRING