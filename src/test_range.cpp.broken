#define CTEST

#include <string>
#include "ctest.h"
#include "Range.h"

Test test_range_default_constructor()
{
    Range range;
    assertTrue(range.getStart() == Location());
    assertTrue(range.getEnd() == Location());
}

Test test_range_parameterized_constructor()
{
    Location start(1, 2, "start.txt");
    Location end(3, 4, "end.txt");
    Range range(start, end);
    assertTrue(range.getStart() == start);
    assertTrue(range.getEnd() == end);
}

Test test_range_copy_constructor()
{
    Location start(5, 6, "copy_start.txt");
    Location end(7, 8, "copy_end.txt");
    Range range1(start, end);
    Range range2(range1);
    assertTrue(range2.getStart() == start);
    assertTrue(range2.getEnd() == end);
}

Test test_range_assignment_operator()
{
    Location start(9, 10, "assign_start.txt");
    Location end(11, 12, "assign_end.txt");
    Range range1(start, end);
    Range range2;
    range2 = range1;
    assertTrue(range2.getStart() == start);
    assertTrue(range2.getEnd() == end);
}

Test test_range_move_constructor()
{
    Location start(13, 14, "move_start.txt");
    Location end(15, 16, "move_end.txt");
    Range range1(start, end);
    Range range2(std::move(range1));
    assertTrue(range2.getStart() == start);
    assertTrue(range2.getEnd() == end);
}

Test test_range_move_assignment_operator()
{
    Location start(17, 18, "move_assign_start.txt");
    Location end(19, 20, "move_assign_end.txt");
    Range range1(start, end);
    Range range2;
    range2 = std::move(range1);
    assertTrue(range2.getStart() == start);
    assertTrue(range2.getEnd() == end);
}

Test test_range_equality_operator()
{
    Location start(21, 22, "eq_start.txt");
    Location end(23, 24, "eq_end.txt");
    Range range1(start, end);
    Range range2(start, end);
    assertTrue(range1 == range2);
}

Test test_range_inequality_operator()
{
    Location start1(25, 26, "neq_start1.txt");
    Location end1(27, 28, "neq_end1.txt");
    Location start2(29, 30, "neq_start2.txt");
    Location end2(31, 32, "neq_end2.txt");
    Range range1(start1, end1);
    Range range2(start2, end2);
    assertTrue(range1 != range2);
}

Test test_range_to_string()
{
    Location start(33, 34, "str_start.txt");
    Location end(35, 36, "str_end.txt");
    Range range(start, end);
    std::string expected = start.toString() + " - " + end.toString();
    assertStringEqual(range.toString().c_str(), expected.c_str());
}

int main()
{
    START_TEST;
    START_GROUP(Constructor Tests);
    TEST(test_range_default_constructor);
    TEST(test_range_parameterized_constructor);
    TEST(test_range_copy_constructor);
    TEST(test_range_assignment_operator);
    TEST(test_range_move_constructor);
    TEST(test_range_move_assignment_operator);
    END_GROUP;
    START_GROUP(Operator Tests);
    TEST(test_range_equality_operator);
    TEST(test_range_inequality_operator);
    END_GROUP;
    START_GROUP(String Representation Tests);
    TEST(test_range_to_string);
    END_GROUP;
    END_TEST;
}