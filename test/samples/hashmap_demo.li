# HashMap Demo - Demonstrates the HashMap module functionality

import <io>
# HashMap Module for Lithium
# Provides a simple but efficient HashMap implementation

# HashMap class using array of key-value pairs with polynomial rolling hash
class HashMap
{
    let buckets = [];
    let size = 0;

    fn HashMap()
    {
        buckets = [];
        size = 0;
    }

    # Better hash function using character codes and polynomial rolling hash
    fn hash(key)
    {
        let keyStr = ("" + key).lower();  # Convert to string and normalize

        # Use the new .code() method to get character codes
        let codes = keyStr.code();  # Returns array of char codes for multi-char strings

        let hashValue = 0;
        let prime = 31;  # Common prime for polynomial hashing

        for (let i = 0; i < len(codes); i++)
        {
            hashValue = hashValue * prime + codes[i];
        }

        # Handle negative values (in case of overflow)
        if (hashValue < 0)
        {
            hashValue = -hashValue;
        }

        return hashValue % 100;  # Larger modulo for better distribution
    }

    # Set a key-value pair
    fn set(key, value)
    {
        let keyStr = ("" + key).lower();  # Convert key to string and normalize

        # Look for existing key
        for (let i = 0; i < len(buckets); i++)
        {
            let bucket = buckets[i];
            if (bucket[0] == keyStr)
            {
                # Update existing key
                buckets[i] = [keyStr, value];
                return;
            }
        }

        # Add new key-value pair
        buckets += [[keyStr, value]];
        size++;
    }

    # Get value by key
    fn get(key)
    {
        let keyStr = ("" + key).lower();  # Convert key to string and normalize

        for (let i = 0; i < len(buckets); i++)
        {
            let bucket = buckets[i];
            if (bucket[0] == keyStr)
            {
                return bucket[1];
            }
        }

        return null;  # Key not found
    }

    # Check if key exists
    fn has(key)
    {
        let keyStr = ("" + key).lower();  # Convert key to string and normalize

        for (let i = 0; i < len(buckets); i++)
        {
            let bucket = buckets[i];
            if (bucket[0] == keyStr)
            {
                return true;
            }
        }

        return false;
    }

    # Remove a key
    fn remove(key)
    {
        let keyStr = ("" + key).lower();  # Convert key to string and normalize
        let newBuckets = [];
        let found = false;

        for (let i = 0; i < len(buckets); i++)
        {
            let bucket = buckets[i];
            if (bucket[0] != keyStr)
            {
                newBuckets += [bucket];
            }
            else
            {
                found = true;
                size--;
            }
        }

        buckets = newBuckets;
        return found;
    }

    # Get all keys
    fn keys()
    {
        let keyList = [];
        for (let i = 0; i < len(buckets); i++)
        {
            keyList += buckets[i][0];
        }
        return keyList;
    }

    # Get all values
    fn values()
    {
        let valueList = [];
        for (let i = 0; i < len(buckets); i++)
        {
            valueList += buckets[i][1];
        }
        return valueList;
    }

    # Get all entries as [key, value] pairs
    fn getEntries()
    {
        return buckets;
    }

    # Get size
    fn getSize()
    {
        return size;
    }

    # Clear all entries
    fn clear()
    {
        buckets = [];
        size = 0;
    }

    # Print all key-value pairs
    fn print()
    {
        println("HashMap contents:");
        if (size == 0)
        {
            println("  (empty)");
            return;
        }

        for (let i = 0; i < len(buckets); i++)
        {
            let bucket = buckets[i];
            printf("  %: %\n", bucket[0], bucket[1]);
        }
    }

    # Check if HashMap is empty
    fn isEmpty()
    {
        return size == 0;
    }
}

# Demo the HashMap
println("🗂️  HashMap Demo in Lithium");
println("============================");

let map = HashMap();

# Add some data
println("\n📝 Adding data:");
map.set("name", "John Doe");
map.set("Age", 30);  # Test case sensitivity (should be normalized)
map.set("CITY", "New York");  # Test case sensitivity
map.set("email", "john@example.com");
map.set(42, "The Answer");  # Number as key
map.set("special-chars", "Testing!@#$%");  # Special characters
map.set("émojis", "🚀✨🎯");  # Unicode test

map.print();

# Test new methods
println("\n🔍 Testing new methods:");
printf("Is empty: %\n", map.isEmpty());
printf("Size: %\n", map.getSize());

# Test entries
println("\n📋 All entries:");
let entries = map.getEntries();
for (let i = 0; i < len(entries); i++) {
    printf("  [%]: %\n", entries[i][0], entries[i][1]);
}

# Test retrieval
println("\n🔍 Retrieving data:");
printf("Name: %\n", map.get("name"));
printf("Age (lowercase): %\n", map.get("age"));  # Should find "Age" due to normalization
printf("City (lowercase): %\n", map.get("city"));  # Should find "CITY" due to normalization
printf("Unknown key: %\n", map.get("unknown"));
printf("Number key (42): %\n", map.get(42));

# Test existence
println("\n✅ Testing key existence:");
printf("Has 'name': %\n", map.has("name"));
printf("Has 'unknown': %\n", map.has("unknown"));

# Show all keys and values
println("\n📋 All keys:");
let allKeys = map.keys();
for (let i = 0; i < len(allKeys); i++) {
    printf("  %\n", allKeys[i]);
}

println("\n📋 All values:");
let allValues = map.values();
for (let i = 0; i < len(allValues); i++) {
    printf("  %\n", allValues[i]);
}

# Update existing key
println("\n🔄 Updating age:");
map.set("AGE", 31);  # Test case normalization on update
printf("New age: %\n", map.get("age"));

# Remove a key
println("\n🗑️  Removing 'city':");
let removed = map.remove("CITY");  # Test case normalization on removal
printf("Removed: %\n", removed);
map.print();

printf("\nFinal size: %\n", map.getSize());
