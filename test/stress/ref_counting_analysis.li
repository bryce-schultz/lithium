fn testRefCounting() {
    println("Testing reference counting patterns...");
    
    fn simpleFunc() {
        let x = "simple";
        return x;
    }
    let result1 = simpleFunc();
    println("Simple function: " + result1);
    
    fn createSimpleClosure() {
        let captured = "captured_value";
        fn closure() {
            return captured;
        }
        return closure;
    }
    let closure1 = createSimpleClosure();
    let result2 = closure1();
    println("Simple closure: " + result2);
    
    fn createNestedClosure() {
        let outer = "outer_value";
        fn innerClosure() {
            let inner = outer + "_inner";
            fn deepClosure() {
                return inner + "_deep";
            }
            return deepClosure;
        }
        return innerClosure;
    }
    let nestedClosure = createNestedClosure();
    let deepClosure = nestedClosure();
    let result3 = deepClosure();
    println("Nested closure: " + result3);
    
    {
        let blockVar = "block_value";
        println("Block variable: " + blockVar);
    }
    
    for (let i = 0; i < 3; i++) {
        let loopVar = "loop_" + i;
        if (i == 1) {
            println("Loop variable: " + loopVar);
        }
    }
}

testRefCounting();
