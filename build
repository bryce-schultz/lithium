#!/usr/bin/env bash

green='\033[0;32m'
bold_green='\033[1;32m'
red='\033[0;31m'
bold_red='\033[1;31m'
yellow='\033[0;33m'
blue='\033[0;34m'
bold_blue='\033[1;34m'
strike='\033[9m'
nc='\033[0m'

build_args=$@

# get the path of this file
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

cd $DIR

success()
{
    msg=$1
    echo -en "\n ${bold_green}●${nc} ${msg}${nc}"
}

failure()
{
    msg=$1
    echo -en "\n ${bold_red}●${nc} ${msg}${nc}"
}

print_build_header()
{
    echo -e  "${blue}╭────────────────────────────────────────────╮${nc}"
    echo -e  "${blue}│                  ${bold_blue}Building                  │${nc}"
    echo -en "${blue}╰────────────────────────────────────────────╯${nc}"
}

contains_clean()
{
    for arg in $build_args; do
        if [ $arg == "clean" ]; then
            return 0
        fi
    done

    return 1
}

contains_no_test()
{
    for arg in $build_args; do
        if [ $arg == "--no-test" ]; then
            return 0
        fi
    done

    return 1
}

build_target()
{
    target=$1
    failed=0

    build_args_without_no_test=$(echo $build_args | sed 's/--no-test//g')

    cd src/$target

    if [ -z "$target" ]; then
        target="src"
    fi

    # Use parallel compilation with all available cores for faster builds
    make -j$(nproc) $build_args_without_no_test > /dev/null

    if [ $? -eq 0 ]; then
        success $target
    else
        failed=1
        failure $target
    fi

    cd $DIR

    return $failed
}

do_builds()
{
    build_failed=0
    print_build_header
    build_target

    if [ $? -ne 0 ]; then
        build_failed=1
    fi

    contains_clean && {
        echo -e "\n${green}╭────────────────────────────────────────────╮${nc}"
        echo -e   "${green}│                  ${bold_green}Cleaned                   │${nc}"
        echo -e   "${green}╰────────────────────────────────────────────╯${nc}"
        exit 0
    }

    if [ $build_failed -eq 1 ]; then
        echo -e "\n${red}╭────────────────────────────────────────────╮${nc}"
        echo -e   "${red}│               ${bold_red}Builds Failed                │${nc}"
        echo -e  "${red}╰────────────────────────────────────────────╯${nc}"
        exit 1
    fi

    echo -e "\n${green}╭────────────────────────────────────────────╮${nc}"
    echo -e   "${green}│              ${bold_green}Builds Succeeded              │${nc}"
    echo -e   "${green}╰────────────────────────────────────────────╯${nc}"
}

do_tests()
{
    contains_no_test || contains_clean && {
        return
    }

    run_all_tests
}

main()
{
    do_builds
    do_tests
}

main
